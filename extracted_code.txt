File: /home/mohammad/E-commerce-1/app/messaging.py
--------------------------------------------------------------------------------
# File: /home/mohammad/E-commerce-1/app/messaging.py
# --------------------------------------------------------------------------------
import pika
import time  # Import time module
from app.extensions import logger  # Import the logger

# Connection parameters for RabbitMQ
RABBITMQ_HOST = 'localhost'
QUEUE_NAME = 'sales_notifications'

def setup_channel():
    """Establish connection and return a channel."""
    connection = pika.BlockingConnection(pika.ConnectionParameters(host=RABBITMQ_HOST))
    channel = connection.channel()
    channel.queue_declare(queue=QUEUE_NAME)  # Ensure the queue exists
    return channel, connection

def publish_message(message):
    """Publish a message to the queue."""
    channel, connection = setup_channel()
    channel.basic_publish(exchange='', routing_key=QUEUE_NAME, body=message)
    logger.info(f"[x] Sent: {message}")
    connection.close()

def consume_messages(callback):
    """Consume messages from the queue."""
    channel, connection = setup_channel()

    def on_message(ch, method, properties, body):
        start_time = time.time()
        logger.info(f"[x] Received: {body.decode()}")
        callback(body.decode())
        elapsed_time = time.time() - start_time
        logger.info(f"Message processed in {elapsed_time:.4f}s")

    channel.basic_consume(queue=QUEUE_NAME, on_message_callback=on_message, auto_ack=True)
    logger.info("[*] Waiting for messages. To exit press CTRL+C")
    channel.start_consuming()
# --------------------------------------------------------------------------------

================================================================================

File: /home/mohammad/E-commerce-1/app/extensions.py
--------------------------------------------------------------------------------
# File: /home/mohammad/E-commerce-1/app/extensions.py
# --------------------------------------------------------------------------------
import logging
from flask_sqlalchemy import SQLAlchemy
from redis import Redis
from sqlalchemy import event
import time  # Import time module

# Initialize Redis connection
redis_connection = Redis(host='localhost', port=6379)

# Initialize shared extensions
db = SQLAlchemy()

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("app.log"),  # Log to a file
        logging.StreamHandler()         # Log to the console
    ]
)
logger = logging.getLogger(__name__)

# SQLAlchemy Query Profiling
@event.listens_for(db.engine, "before_cursor_execute")
def before_cursor_execute(conn, cursor, statement, parameters, context, executemany):
    conn.info.setdefault("query_start_time", []).append(time.time())
    logger.info(f"Executing Query: {statement}")

@event.listens_for(db.engine, "after_cursor_execute")
def after_cursor_execute(conn, cursor, statement, parameters, context, executemany):
    total = time.time() - conn.info["query_start_time"].pop(-1)
    logger.info(f"Query Executed in {total:.4f}s")
# --------------------------------------------------------------------------------

================================================================================

File: /home/mohammad/E-commerce-1/app/utils.py
--------------------------------------------------------------------------------
# File: /home/mohammad/E-commerce-1/app/utils.py
import cProfile
import pstats
import io
from app.extensions import logger
from flask import request

def profile_route(func):
    def wrapper(*args, **kwargs):
        profiler = cProfile.Profile()
        profiler.enable()
        result = func(*args, **kwargs)
        profiler.disable()
        
        s = io.StringIO()
        ps = pstats.Stats(profiler, stream=s).sort_stats('cumulative')
        ps.print_stats(10)  # Adjust the number of functions to display
        profiling_info = s.getvalue()
        
        logger.info(f"Profiling info for {request.path}:\n{profiling_info}")
        
        return result
    wrapper.__name__ = func.__name__
    return wrapper

================================================================================

File: /home/mohammad/E-commerce-1/app/models.py
--------------------------------------------------------------------------------
from app.extensions import db

class Customer(db.Model):
    __tablename__ = 'customer'
    id = db.Column(db.Integer, primary_key=True)
    full_name = db.Column(db.String(100), nullable=False)
    username = db.Column(db.String(50), unique=True, nullable=False)
    password = db.Column(db.String(200), nullable=False)
    age = db.Column(db.Integer, nullable=False)
    address = db.Column(db.String(200), nullable=False)
    gender = db.Column(db.String(10), nullable=False)
    marital_status = db.Column(db.String(20), nullable=False)
    wallet_balance = db.Column(db.Float, default=0.0)
    
class Goods(db.Model):
    __tablename__ = "goods"
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False, unique=True)
    price = db.Column(db.Float, nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    
class Sales(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    customer_id = db.Column(db.Integer, db.ForeignKey('customer.id'), nullable=False)
    good_id = db.Column(db.Integer, db.ForeignKey('goods.id'), nullable=False)
    quantity = db.Column(db.Integer, nullable=False)
    total_price = db.Column(db.Float, nullable=False)
    timestamp = db.Column(db.DateTime, default=db.func.current_timestamp())
    
class InventoryItem(db.Model):
    __tablename__ = 'inventory_items'
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(80), nullable=False)
    category = db.Column(db.String(80), nullable=False)
    price_per_item = db.Column(db.Float, nullable=False)
    description = db.Column(db.String(255), nullable=False)
    count_in_stock = db.Column(db.Integer, nullable=False)

class Review(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    product_id = db.Column(db.Integer, nullable=False)
    user_id = db.Column(db.Integer, nullable=False)
    rating = db.Column(db.Integer, nullable=False)
    comment = db.Column(db.String(255), nullable=True)
================================================================================

File: /home/mohammad/E-commerce-1/app/seed_data.py
--------------------------------------------------------------------------------
from app import create_app
from app.extensions import db
from app.models import Goods

app = create_app()

with app.app_context():
    # Drop and recreate the database for a clean slate (optional)
    db.drop_all()
    db.create_all()

    # Sample data for the Goods table
    goods_list = [
        Goods(name="Laptop", price=1000.0, quantity=10),
        Goods(name="Phone", price=500.0, quantity=20),
        Goods(name="Headphones", price=100.0, quantity=30),
        Goods(name="Monitor", price=300.0, quantity=15),
        Goods(name="Keyboard", price=50.0, quantity=25),
    ]

    # Add goods to the database
    db.session.bulk_save_objects(goods_list)
    db.session.commit()

    print("Goods table seeded successfully!")
================================================================================

File: /home/mohammad/E-commerce-1/app/app.py
--------------------------------------------------------------------------------

import sys
import os
from flask import Flask, jsonify, request
from flask_migrate import Migrate
from app.extensions import db, limiter, logger  # Ensure these are correctly imported
from app.routes.customers import customer_bp
from app.routes.inventory import inventory_bp
from app.routes.sales import sales_bp
from app.routes.review import review_bp 

# Import Flask-Profiler
from flask_profiler import Profiler

app = Flask(__name__)
app.config['SQLALCHEMY_DATABASE_URI'] = 'sqlite:///ecommerce.db'
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

# Flask-Profiler Configuration
app.config["flask_profiler"] = {
    "enabled": True,
    "storage": {
        "engine": "sqlite"  # You can choose 'mongodb' or others based on your preference
    },
    "basicAuth": {
        "enabled": False,  # Set to True and provide credentials if needed
    },
    "ignore": ["^/static/.*"],  # Routes to ignore from profiling
}

# Initialize extensions
db.init_app(app)
limiter.init_app(app)  # Attach limiter to app
migrate = Migrate(app, db)

# Initialize Flask-Profiler
Profiler(app)

@app.errorhandler(429)
def rate_limit_exceeded(e):
    return jsonify({'error': 'Rate limit exceeded'}), 429

# Register blueprints
app.register_blueprint(customer_bp, url_prefix='/api/customers')
app.register_blueprint(inventory_bp, url_prefix='/api/inventory')
app.register_blueprint(sales_bp, url_prefix='/api/sales')
app.register_blueprint(review_bp, url_prefix='/api/reviews')

@app.route('/health', methods=['GET'])
def global_health_check():
    """Check if the Flask app is running."""
    return {"status": "ok", "message": "App is running"}, 200

@app.before_request
def log_request_info():
    logger.info(f"Request: {request.method} {request.url} - Data: {request.get_json()}")

@app.after_request
def log_response_info(response):
    logger.info(f"Response: {response.status} - Data: {response.get_data(as_text=True)}")
    return response
    
if __name__ == "__main__":
    app.run(debug=True)
================================================================================

File: /home/mohammad/E-commerce-1/app/__init__.py
--------------------------------------------------------------------------------
from dotenv import load_dotenv
import os

# Load environment variables from .env
load_dotenv()

def create_app():
    app = Flask(__name__)
    
    # Configuration
    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'default_secret')
    app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('SQLALCHEMY_DATABASE_URI', 'sqlite:///ecommerce.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = os.getenv('SQLALCHEMY_TRACK_MODIFICATIONS', False)
    
    # Initialize extensions
    db.init_app(app)
    migrate.init_app(app, db)
    limiter.init_app(app)
    CORS(app)
    
    # Register blueprints
    from app.routes.customers import customer_bp
    from app.routes.inventory import inventory_bp
    from app.routes.sales import sales_bp
    from app.routes.review import review_bp
    
    app.register_blueprint(customer_bp, url_prefix='/api/customers')
    app.register_blueprint(inventory_bp, url_prefix='/api/inventory')
    app.register_blueprint(sales_bp, url_prefix='/api/sales')
    app.register_blueprint(review_bp, url_prefix='/api/reviews')
    
    # Health check route
    @app.route('/health', methods=['GET'])
    def global_health_check():
        """Check if the Flask app is running."""
        return {"status": "ok", "message": "App is running"}, 200
    
    # Error handler for rate limiting
    @app.errorhandler(429)
    def rate_limit_exceeded(e):
        return {"error": "Rate limit exceeded"}, 429
    
    # Logging
    @app.before_request
    def log_request_info():
        logger.info(f"Request: {request.method} {request.url} - Data: {request.get_json()}")
    
    @app.after_request
    def log_response_info(response):
        logger.info(f"Response: {response.status} - Data: {response.get_data(as_text=True)}")
        return response
    
    return app

================================================================================

File: /home/mohammad/E-commerce-1/app/message_consumer.py
--------------------------------------------------------------------------------
# File: /home/mohammad/E-commerce-1/app/message_consumer.py
# --------------------------------------------------------------------------------
from app.messaging import consume_messages
from app.extensions import logger
import cProfile
import pstats
import io

def handle_message(message):
    """Process the received message."""
    profiler = cProfile.Profile()
    profiler.enable()
    
    # Existing message processing logic
    logger.info(f"Processing message: {message}")
    # Example processing (replace with actual logic)
    # process_message(message)
    
    profiler.disable()
    s = io.StringIO()
    ps = pstats.Stats(profiler, stream=s).sort_stats('cumulative')
    ps.print_stats(10)  # Top 10 functions
    profiling_info = s.getvalue()
    
    logger.info(f"Profiling info for message processing:\n{profiling_info}")

if __name__ == "__main__":
    consume_messages(handle_message)    
# --------------------------------------------------------------------------------

================================================================================

File: /home/mohammad/E-commerce-1/app/routes/inventory.py
--------------------------------------------------------------------------------
from flask import Blueprint, request, jsonify
from app.models import InventoryItem
from app.extensions import db

inventory_bp = Blueprint('inventory_bp', __name__)

# Add goods
@inventory_bp.route('/', methods=['POST'])
def add_goods():
    data = request.get_json()
    new_item = InventoryItem(
        name=data['name'],
        category=data['category'],
        price_per_item=data['pricePerItem'],
        description=data['description'],
        count_in_stock=data['countInStock']
    )
    db.session.add(new_item)
    db.session.commit()
    return jsonify({'id': new_item.id, 'name': new_item.name}), 201

# Deduct goods
@inventory_bp.route('/deduct', methods=['POST'])
def deduct_goods():
    data = request.get_json()
    item = InventoryItem.query.get(data['itemId'])
    if item and item.count_in_stock >= data['quantity']:
        item.count_in_stock -= data['quantity']
        db.session.commit()
        return jsonify({'id': item.id, 'count_in_stock': item.count_in_stock}), 200
    elif not item:
        return jsonify({'error': 'Item not found'}), 404
    else:
        return jsonify({'error': 'Not enough stock'}), 400

# Update goods
@inventory_bp.route('/<int:item_id>', methods=['PUT'])
def update_goods(item_id):
    data = request.get_json()
    item = InventoryItem.query.get(item_id)
    if item:
        item.name = data.get('name', item.name)
        item.category = data.get('category', item.category)
        item.price_per_item = data.get('pricePerItem', item.price_per_item)
        item.description = data.get('description', item.description)
        item.count_in_stock = data.get('countInStock', item.count_in_stock)
        db.session.commit()
        return jsonify({'id': item.id, 'name': item.name}), 200
    else:
        return jsonify({'error': 'Item not found'}), 404
    
@inventory_bp.route('/health', methods=['GET'])
def inventory_health_check():
    """Check if the Inventory Service is healthy."""
    try:
        # Example: Check database connectivity
        db.session.execute('SELECT 1')
        return {"status": "ok", "service": "Inventory Service"}, 200
    except Exception as e:
        return {"status": "error", "message": str(e)}, 500
================================================================================

File: /home/mohammad/E-commerce-1/app/routes/sales.py
--------------------------------------------------------------------------------
# File: /home/mohammad/E-commerce-1/app/routes/sales.py
# --------------------------------------------------------------------------------
from flask import Blueprint, request, jsonify
from app.models import Customer, Goods, Sales
from app.extensions import db, limiter, logger  # Ensure logger is imported
from app.messaging import publish_message  
from app.app import profile_route  # Import the profiling decorator

# Define the blueprint
sales_bp = Blueprint('sales_bp', __name__)

# ===============================
# Service 3 - Sales Endpoints
# ===============================

# Apply rate limit to the "Display Goods" route
@limiter.limit("10 per minute")  # Allow 10 requests per minute
@sales_bp.route('/goods', methods=['GET'])
def display_goods():
    goods = Goods.query.all()
    return jsonify([
        {'name': good.name, 'price': good.price, 'quantity': good.quantity}
        for good in goods if good.quantity > 0
    ]), 200

# 2. Get goods details
@sales_bp.route('/goods/<good_name>', methods=['GET'])
def get_good_details(good_name):
    good = Goods.query.filter_by(name=good_name).first()
    if not good:
        return jsonify({'error': 'Good not found'}), 404
    return jsonify({
        'id': good.id,
        'name': good.name,
        'price': good.price,
        'quantity': good.quantity
    }), 200


# 3. Make a sale
@sales_bp.route('/purchase', methods=['POST'])
@profile_route  # Apply the profiling decorator (Optional)
def make_sale():
    data = request.get_json()
    username = data.get('username')
    good_name = data.get('good_name')
    quantity = data.get('quantity', 1)

    # Fetch customer and good
    customer = Customer.query.filter_by(username=username).first()
    good = Goods.query.filter_by(name=good_name).first()

    # Validations
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404
    if not good:
        return jsonify({'error': 'Good not found'}), 404
    if good.quantity < quantity:
        return jsonify({'error': 'Not enough stock available'}), 400
    total_price = good.price * quantity
    if customer.wallet_balance < total_price:
        return jsonify({'error': 'Insufficient wallet balance'}), 400

    # Process Sale
    customer.wallet_balance -= total_price
    good.quantity -= quantity
    sale = Sales(customer_id=customer.id, good_id=good.id, quantity=quantity, total_price=total_price)
    db.session.add(sale)
    db.session.commit()

    # Send a notification to RabbitMQ
    message = f"Sale completed: {username} purchased {quantity} x {good_name} for ${total_price:.2f}"
    publish_message(message)

    return jsonify({'message': 'Purchase successful', 'remaining_balance': customer.wallet_balance}), 200


# 4. Purchase history
@sales_bp.route('/history/<username>', methods=['GET'])
def purchase_history(username):
    customer = Customer.query.filter_by(username=username).first()
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404
    sales = Sales.query.filter_by(customer_id=customer.id).all()
    return jsonify([
        {
            'good_name': Goods.query.get(sale.good_id).name,
            'quantity': sale.quantity,
            'total_price': sale.total_price,
            'timestamp': sale.timestamp
        }
        for sale in sales
    ]), 200
    
@sales_bp.route('/health', methods=['GET'])
def sales_health_check():
    """Check if the Sales Service is healthy."""
    try:
        # Example: Check database connectivity
        db.session.execute('SELECT 1')
        return {"status": "ok", "service": "Sales Service"}, 200
    except Exception as e:
        return {"status": "error", "message": str(e)}, 500
    
# --------------------------------------------------------------------------------

================================================================================

File: /home/mohammad/E-commerce-1/app/routes/customers.py
--------------------------------------------------------------------------------
from flask import Blueprint, request, jsonify
from app.models import Customer 
from app.extensions import db
from sqlalchemy.sql import text 
customer_bp = Blueprint('customer_bp', __name__)

# Register a new customer
@customer_bp.route('/register', methods=['POST'])
def register_customer():
    data = request.get_json()
    if Customer.query.filter_by(username=data['username']).first():
        return jsonify({'error': 'Username already taken'}), 400

    new_customer = Customer(
        full_name=data['full_name'],
        username=data['username'],
        password=data['password'],  # In real apps, hash passwords!
        age=data['age'],
        address=data['address'],
        gender=data['gender'],
        marital_status=data['marital_status']
    )
    db.session.add(new_customer)
    db.session.commit()
    return jsonify({'message': 'Customer registered successfully'}), 201

# Get all customers
@customer_bp.route('/', methods=['GET'])
def get_all_customers():
    customers = Customer.query.all()
    return jsonify([{
        'id': customer.id,
        'full_name': customer.full_name,
        'username': customer.username,
        'wallet_balance': customer.wallet_balance
    } for customer in customers]), 200

# Get customer by username
@customer_bp.route('/<username>', methods=['GET'])
def get_customer(username):
    customer = Customer.query.filter_by(username=username).first()
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404
    return jsonify({
        'id': customer.id,
        'full_name': customer.full_name,
        'username': customer.username,
        'age': customer.age,
        'address': customer.address,
        'gender': customer.gender,
        'marital_status': customer.marital_status,
        'wallet_balance': customer.wallet_balance
    }), 200

# Update customer information
@customer_bp.route('/<username>', methods=['PUT'])
def update_customer(username):
    customer = Customer.query.filter_by(username=username).first()
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404
    data = request.get_json()
    for key, value in data.items():
        if hasattr(customer, key):
            setattr(customer, key, value)
    db.session.commit()
    return jsonify({'message': 'Customer updated successfully'}), 200

# Delete customer
@customer_bp.route('/<username>', methods=['DELETE'])
def delete_customer(username):
    customer = Customer.query.filter_by(username=username).first()
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404
    db.session.delete(customer)
    db.session.commit()
    return jsonify({'message': 'Customer deleted successfully'}), 200

# Charge wallet
@customer_bp.route('/<username>/charge', methods=['POST'])
def charge_wallet(username):
    customer = Customer.query.filter_by(username=username).first()
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404
    amount = request.get_json().get('amount', 0)
    customer.wallet_balance += amount
    db.session.commit()
    return jsonify({'message': f'{amount} charged to wallet', 'new_balance': customer.wallet_balance}), 200

# Deduct wallet
@customer_bp.route('/<username>/deduct', methods=['POST'])
def deduct_wallet(username):
    customer = Customer.query.filter_by(username=username).first()
    if not customer:
        return jsonify({'error': 'Customer not found'}), 404
    amount = request.get_json().get('amount', 0)
    if customer.wallet_balance < amount:
        return jsonify({'error': 'Insufficient balance'}), 400
    customer.wallet_balance -= amount
    db.session.commit()
    return jsonify({'message': f'{amount} deducted from wallet', 'new_balance': customer.wallet_balance}), 200

@customer_bp.route('/health', methods=['GET'])
def customer_health_check():
    """Check if the Customer Service is healthy."""
    try:
        # Example: Check database connectivity
        db.session.execute(text('SELECT 1'))  # Explicitly wrap 'SELECT 1' with text()
        return {"status": "ok", "service": "Customer Service"}, 200
    except Exception as e:
        return {"status": "error", "message": str(e)}, 500
================================================================================

File: /home/mohammad/E-commerce-1/app/routes/review.py
--------------------------------------------------------------------------------
from flask import Blueprint, request, jsonify
from app.extensions import db
from app.models import Review

# Define blueprint
review_bp = Blueprint('review_bp', __name__, url_prefix='/api/reviews')

# ===============================
# Service 4 - Review Endpoints
# ===============================

# 1. Submit a new review
@review_bp.route('/', methods=['POST'])
def submit_review():
    data = request.get_json()
    try:
        new_review = Review(
            product_id=data['product_id'],
            user_id=data['user_id'],
            rating=data['rating'],
            comment=data['comment']
        )
        db.session.add(new_review)
        db.session.commit()
        return jsonify({
            'id': new_review.id,
            'product_id': new_review.product_id,
            'user_id': new_review.user_id,
            'rating': new_review.rating,
            'comment': new_review.comment
        }), 201
    except Exception as e:
        return jsonify({'error': str(e)}), 400

# 2. Update a review
@review_bp.route('/<int:review_id>', methods=['PUT'])
def update_review(review_id):
    data = request.get_json()
    review = Review.query.get(review_id)
    if review:
        try:
            review.rating = data.get('rating', review.rating)
            review.comment = data.get('comment', review.comment)
            db.session.commit()
            return jsonify({
                'id': review.id,
                'product_id': review.product_id,
                'user_id': review.user_id,
                'rating': review.rating,
                'comment': review.comment
            }), 200
        except Exception as e:
            return jsonify({'error': str(e)}), 400
    else:
        return jsonify({'error': 'Review not found'}), 404

# 3. Delete a review
@review_bp.route('/<int:review_id>', methods=['DELETE'])
def delete_review(review_id):
    review = Review.query.get(review_id)
    if review:
        db.session.delete(review)
        db.session.commit()
        return jsonify({'message': 'Review deleted successfully'}), 204
    else:
        return jsonify({'error': 'Review not found'}), 404

# 4. Get all reviews for a product
@review_bp.route('/product/<int:product_id>', methods=['GET'])
def get_product_reviews(product_id):
    reviews = Review.query.filter_by(product_id=product_id).all()
    return jsonify([
        {
            'id': review.id,
            'user_id': review.user_id,
            'rating': review.rating,
            'comment': review.comment
        } for review in reviews
    ]), 200

# 5. Get all reviews by a user
@review_bp.route('/user/<int:user_id>', methods=['GET'])
def get_user_reviews(user_id):
    reviews = Review.query.filter_by(user_id=user_id).all()
    return jsonify([
        {
            'id': review.id,
            'product_id': review.product_id,
            'rating': review.rating,
            'comment': review.comment
        } for review in reviews
    ]), 200
    
@review_bp.route('/health', methods=['GET'])
def review_health_check():
    """Check if the Review Service is healthy."""
    try:
        # Example: Check database connectivity
        db.session.execute('SELECT 1')
        return {"status": "ok", "service": "Review Service"}, 200
    except Exception as e:
        return {"status": "error", "message": str(e)}, 500
================================================================================

File: /home/mohammad/E-commerce-1/app/routes/__init__.py
--------------------------------------------------------------------------------
# File: /home/mohammad/E-commerce-1/app/__init__.py
# --------------------------------------------------------------------------------
from dotenv import load_dotenv
import os
from flask import Flask, request
from flask_cors import CORS  # Ensure Flask-CORS is imported
from app.extensions import db, migrate, limiter, logger  # Ensure all extensions are imported
from app.routes.customers import customer_bp
from app.routes.inventory import inventory_bp
from app.routes.sales import sales_bp
from app.routes.review import review_bp

# Load environment variables from .env
load_dotenv()

def create_app():
    app = Flask(__name__)
    
    # Configuration
    app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'default_secret')
    app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('SQLALCHEMY_DATABASE_URI', 'sqlite:///ecommerce.db')
    app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = os.getenv('SQLALCHEMY_TRACK_MODIFICATIONS', False)
    
    # Flask-Profiler Configuration
    app.config["flask_profiler"] = {
        "enabled": True,
        "storage": {
            "engine": "sqlite"  # Consistent with app.py
        },
        "basicAuth": {
            "enabled": False,
        },
        "ignore": ["^/static/.*"],
    }
    
    # Initialize extensions
    db.init_app(app)
    migrate.init_app(app, db)
    limiter.init_app(app)
    CORS(app)
    
    # Initialize Flask-Profiler
    from flask_profiler import Profiler
    Profiler(app)
    
    # Register blueprints
    app.register_blueprint(customer_bp, url_prefix='/api/customers')
    app.register_blueprint(inventory_bp, url_prefix='/api/inventory')
    app.register_blueprint(sales_bp, url_prefix='/api/sales')
    app.register_blueprint(review_bp, url_prefix='/api/reviews')
    
    # Health check route
    @app.route('/health', methods=['GET'])
    def global_health_check():
        """Check if the Flask app is running."""
        return {"status": "ok", "message": "App is running"}, 200
    
    # Error handler for rate limiting
    @app.errorhandler(429)
    def rate_limit_exceeded(e):
        return {"error": "Rate limit exceeded"}, 429
    
    # Logging
    @app.before_request
    def log_request_info():
        logger.info(f"Request: {request.method} {request.url} - Data: {request.get_json()}")
    
    @app.after_request
    def log_response_info(response):
        if hasattr(request, 'start_time'):
            elapsed_time = time.time() - request.start_time
            logger.info(f"Time taken: {elapsed_time:.4f}s for {request.method} {request.path}")
        logger.info(f"Response: {response.status} - Data: {response.get_data(as_text=True)}")
        return response
    
    return app
# --------------------------------------------------------------------------------

================================================================================

